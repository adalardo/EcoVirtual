curve((E[1]/P[1])*x,0,P,lwd=2,add=TRUE, col=corIsl[1], lty=2) #xlim=c(0,1),
legend("top", legend=c("Colonization", "Extinction"),  bty="n",lty=c(1,2))
abline(v=0)
abline(h=0)
mtext("St",side=1,at=P,font=2, line=1)
linhas=seq(0,1.5, length.out=nIsl)
for(i in 1:nIsl)
{
curve(I[i]-I[i]*x/P,0,P,lwd=2,add=TRUE, col=corIsl[i], lty=1)
curve((E[i]/P)*x,0,P,lwd=2,add=TRUE, col=corIsl[i], lty=2)
mtext(paste("S", i, sep=""),side=1,at=S[i], cex=0.8,font=2,col=corIsl[i], line=linhas[i])
mtext(paste("T", i, sep=""),side=2,at=T[i],cex=0.8,font=2,las=1,col=corIsl[i], line=linhas[i])
points(S[i],T[i],col=corIsl[i],pch=16,cex=1)
if(length(unique(areas))>1)
{
siz_ar=2 +(areas/max(areas))
points(S[i],T[i],col=corIsl[i],cex=siz_ar[i])
}
segments(S[i],T[i],S[i],0,lty=3,col=corIsl[i])
segments(S[i],T[i],0,T[i],lty=3,col=corIsl[i])
Sys.sleep(0.1)
}
#	mtext("I",side=2,at=I,font=2,las=1, line=2)
#	mtext("E",side=4,at=E,font=2,las=1)
}
animaColExt(Ext='crs', Col="dcr")
bioGeoIsl=function(areas , dist , P , peso.A=.5 , a=1, b=-.01, c=1, d=-.01,e=0, f=.01,g=0, h=.01)
{
x11()
nf <- layout(matrix(c(1,2), 2, 1),widths=c(1), heights=c(4,1))
#layout.show(nf)
def_par<-par(mar=c(4,7,3,7))
E=((a+b*areas)*peso.A+(g+h*dist)*(1-peso.A))
I=((c+d*dist)*peso.A+(e+f*areas)*(1-peso.A))
#E=((b*areas)*peso.A + (h*dist)*(1-peso.A))
#I=((d*dist)*peso.A+(f*areas)*(1-peso.A))
I[I<=0]<-0.001
E[E<=0]<-0.001
#E=((b*r.areas) * peso.A) + ((h*r.dist)*(1-peso.A))
#I= ((d*r.dist) * (1-peso.A)) + (f*r.areas*peso.A)
S=I*P/(I+E)
T=I*E/(I+E)
nIsl=length(areas)
grColExt(E=E , I=I , P=P, areas=areas)
ex=data.frame(areas=areas,spp=S,dist=dist)
par(mar=c(0,0,0,0))
plot(1:10, 1:10, type="n", xlab="", ylab="", bty="n", xaxt="n", yaxt="n")
points(rep(4,nIsl), 2:(nIsl+1), col=rainbow(nIsl))
text(c (5, 6),c(nIsl+3,nIsl+3), c("Size","Distance"))
text(rep(5,nIsl),2:(nIsl+1), areas)
text(rep(6,nIsl),2:(nIsl+1), dist)
segments(4.5,nIsl+2, 6.5, nIsl+2)
segments(4.5, nIsl+3, 4.5, 1)
par(def_par)
invisible(ex)
}
bioGeoIsl(areas=c(5,10,50,80) , dist=c(10,100,100,10), P=100 , peso.A=.5 , a=1, b=-.01, c=1, d=-.01, e=0, f=.01, g=0, h=.01)
bioGeoIsl(areas=c(5,10,50,80) , dist=c(10,100,100,10), P=100 , peso.A=.5 , a=1, b=-.01, c=1, d=-.01, e=0, f=.01, g=0, h=.01)
randWalk(n=10,step=10,ciclo=1e4)
randWalk <- function(n=1,step=1,ciclo=1e5,x1max=200, alleq=FALSE){
cont=round(ciclo/100)
sleep=0.01
if(cont>5e4){sleep=0}
if(alleq){
x1=rep(x1max,n)
}else{
x1 <- sample(1:x1max,n,replace=TRUE)
}
results <- matrix(NA,nrow=1+ciclo/cont,ncol=n)
results[1,] <- x1
X <- x1
for(i in 2:(1+ciclo/cont)){
for(j in 1:cont){
X[X<=0] <- NA
X <- X +sample(c(step,-1*step),n,replace=TRUE)
}
results[i,] <- X
}
results[is.na(results)] <- 0
time <- seq(0,ciclo,by=cont)
x11()
animaRandWalk(rwData=results, time= time, sleep=sleep)
invisible(results)
#  matplot(time,results,type="l", col=rainbow(n),lwd=2, xlab="Steps",  main="Randon Walk",ylab="Distance from the edge")
#  abline(h=0,lwd=4)
}
randWalk(n=10,step=10,ciclo=1e4)
estExp <- function(N0,r,varr,tmax)
{
resulta <- matrix(rep(NA,3*tmax),nrow=tmax)
resulta[,1] <- seq(0,tmax-1)
resulta[1,2:3] <- N0
for (t in 2:tmax)
{
resulta[t,2] <- N0*(exp(r*(t-1)))
re <- rnorm(1,r,sqrt(varr))
#cat("t =",t-1,"\n")
#cat("r stocastic = ", re,"\n")
resulta[t,3] <- resulta[t-1,3]*exp(re)
if (resulta[t,3]<1)
{
resulta[t,3] <- 0
}
}
plot(resulta[,1],resulta[,2],type="l",main="Exponential Population Growth", lty=2,xlab="Time(t)", ylab="Population size (N)",ylim=c(0,max(resulta[,2:3])))
lines(resulta[,1],resulta[,3], col="red", lty=2)
legend("topleft",c("deterministic","environment stocastic"),lty=2, col=c(1,2), bty="n")
text(x=tmax*0.4, y= resulta[(tmax/2),2], paste("r=", r), col="blue")
text(x=tmax*0.6, y= resulta[(tmax/2),2], paste("var=", varr), col="blue")
invisible(resulta)
}
estExp(N0=1000,r=0.0488,varr=0.005,tmax=100)
estExp <- function(N0,r,varr,tmax)
{
resulta <- matrix(rep(NA,3*tmax),nrow=tmax)
resulta[,1] <- seq(0,tmax-1)
resulta[1,2:3] <- N0
for (t in 2:tmax)
{
resulta[t,2] <- N0*(exp(r*(t-1)))
re <- rnorm(1,r,sqrt(varr))
#cat("t =",t-1,"\n")
#cat("r stocastic = ", re,"\n")
resulta[t,3] <- resulta[t-1,3]*exp(re)
if (resulta[t,3]<1)
{
resulta[t,3] <- 0
}
}
x11()
plot(resulta[,1],resulta[,2],type="l",main="Exponential Population Growth", lty=2,xlab="Time(t)", ylab="Population size (N)",ylim=c(0,max(resulta[,2:3])))
lines(resulta[,1],resulta[,3], col="red", lty=2)
legend("topleft",c("deterministic","environment stocastic"),lty=2, col=c(1,2), bty="n")
text(x=tmax*0.4, y= resulta[(tmax/2),2], paste("r=", r), col="blue")
text(x=tmax*0.6, y= resulta[(tmax/2),2], paste("var=", varr), col="blue")
invisible(resulta)
}
estExp(N0=1000,r=0.0488,varr=0.005,tmax=100)
estDem=function(N0, b, d, tmax)
{
resulta=matrix(0,ncol=11, nrow=(tmax+1))
colnames(resulta)=c("time", "Nt.dt", "birth.dt", "death.dt", "b.dt", "d.dt", "Nt.st", "nasc.st",
"mort.st", "b.st", "d.st")
resulta[,1]=0:tmax
resulta[1,c(2,7)]=N0
pnasc=b/(b+d)
pmort=d/(b+d)
for(t in 2:(tmax+1))
{
nt.dt=resulta[(t-1),2]
nt.st=resulta[(t-1),7]
if(nt.dt>0)
{
n.mort.dt=nt.dt*d
n.nasc.dt=nt.dt*b
nt1.dt=nt.dt+ n.nasc.dt -n.mort.dt
resulta[(t-1),3 ]= n.nasc.dt
resulta[(t-1),4 ]= n.mort.dt
resulta[(t-1),5 ]=n.nasc.dt/nt.dt
resulta[(t-1),6 ]=n.mort.dt/nt.dt
if(nt1.dt>0)
{
resulta[t,2]=nt1.dt
}
}
if(nt.st>0)
{
n.nasc.st=rbinom(1,nt.st,pnasc)
n.mort.st=rbinom(1,nt.st,pmort)
nt1.st=nt.st + n.nasc.st - n.mort.st
resulta[(t-1),8]=n.nasc.st
resulta[(t-1),9]=n.mort.st
resulta[(t-1),10]=n.nasc.st/nt.st
resulta[(t-1),11]=n.mort.st/nt.st
if(nt1.st>0)
{
resulta[t,7]=nt1.st
}
else
{
resulta[t,7]=0
}
}
}
y.max=max(resulta[,c(5,6,10,11)])* 1.2
y.min=min(resulta[,c(5,6,10,11)])* 0.8
nt=dim(resulta)[1]-1
x11()
old=par(mfrow=c(2,1), mar=c(5,4,2,2), cex.lab=0.7, cex.axis=0.7,cex.main=0.8)
plot(resulta[1:nt,"time"] ,resulta[1:nt,"b.dt"],type="l", main="Birth and Death Rates",cex.main=0.7,ylim=c(y.min,y.max),xlab="Time", ylab="Rate", lty=2)
lines(resulta[1:nt,"time"], resulta[1:nt,"d.dt"], col="red",lty=2)
lines(resulta[1:nt,"time"], resulta[1:nt,"d.st"], col="red")
lines(resulta[1:nt,"time"], resulta[1:nt,"b.st"])
legend("bottomright", legend=c("basal birth", "basal death","stochastic bird", "stochastic dead"),lty=c(2,2,1,1),col=c(1,2,1,2), bty="n", cex=0.7)
plot(resulta[1:nt,"time"] , resulta[1:nt,"Nt.dt"],main="Population Growth", type="l",xlab="Time", ylab="Population size (N)",lty=2)
lines(resulta[1:nt,"time"], resulta[1:nt,"Nt.st"], col="red")
legend("bottomright", legend=c("Deterministic Model", "Stochastic Model"),lty=c(1,2),col=c(1,2), bty="n", cex=0.7)
par(old)
invisible(resulta)
}
estDem(N0=100, b=0.55, d=0.5, tmax=50)
crescLog=function(N0, r, K, tmax)
{
resulta=matrix(rep(NA,3*tmax),ncol=3)
colnames(resulta)=c("time", "Continuous Model ", "Discrete Model")
resulta[,1]=seq(0,(tmax-1))
resulta[1,2:3]=N0
for(t in 2:tmax)
{
#cat("t= ", t-1,"\n")
resulta[t,2]=K/(1+((K-N0)/N0)*exp(-r*(t-1)))
lastN=resulta[t-1,3]
resulta[t,3]=lastN+r*lastN*(1-lastN/K)
}
plot(resulta[,1],resulta[,2],type="l", lty=2,ylim=c(min(resulta[,c(2,3)])*0.8, K*1.2), xlab="Time (t)", main="Logistic Population Growth", ylab="Population size (N)", sub=paste("Intrinsic rate (r) =", r, sep=""))
lines(resulta[,1],resulta[,3], col="red")
legend("bottomright", colnames(resulta)[2:3],lty=2,col=c(1,2),bty="n")
abline(h=K, lty=3, col="blue")
text(x=2, y=K, "Carying capacity", col="blue",adj=c(0,0))
text(x=tmax*0.5, y= resulta[(tmax/2),2], paste("r=", r),pos=3)
invisible(resulta)
}
crescLog(N0=10, r=0.05, K=80, tmax=100)
crescLog=function(N0, r, K, tmax)
{
resulta=matrix(rep(NA,3*tmax),ncol=3)
colnames(resulta)=c("time", "Continuous Model ", "Discrete Model")
resulta[,1]=seq(0,(tmax-1))
resulta[1,2:3]=N0
for(t in 2:tmax)
{
#cat("t= ", t-1,"\n")
resulta[t,2]=K/(1+((K-N0)/N0)*exp(-r*(t-1)))
lastN=resulta[t-1,3]
resulta[t,3]=lastN+r*lastN*(1-lastN/K)
}
x11()
plot(resulta[,1],resulta[,2],type="l", lty=2,ylim=c(min(resulta[,c(2,3)])*0.8, K*1.2), xlab="Time (t)", main="Logistic Population Growth", ylab="Population size (N)", sub=paste("Intrinsic rate (r) =", r, sep=""))
lines(resulta[,1],resulta[,3], col="red")
legend("bottomright", colnames(resulta)[2:3],lty=2,col=c(1,2),bty="n")
abline(h=K, lty=3, col="blue")
text(x=2, y=K, "Carying capacity", col="blue",adj=c(0,0))
text(x=tmax*0.5, y= resulta[(tmax/2),2], paste("r=", r),pos=3)
invisible(resulta)
}
crescLog(N0=10, r=0.05, K=80, tmax=100)
popStr=function(p.sj, p.jj, p.ja, p.aa, fec, ns,nj,na, ln, cl, tmax)
{
ncel=ln*cl
arena=matrix(0,nrow=ln,ncol=cl)
xy.sem=list()
#sem[1]=ns
pais=array(0,dim=c(ln, cl, tmax))
tab.fr=matrix(NA,ncol=4, nrow=tmax)
#image(0:ln,0:cl, matrix(0,nrow=ln,ncol=cl), col="white", xlab="", ylab="")
#grid(ln,cl)
n0=rep(c(0,2,3), c((ncel-nj-na),nj, na))
arena[1:ncel]<-sample(n0)
image(0:ln, 0:cl, arena, main="Structured Population Dynamics", col=c("white", "green", "darkgreen") , breaks=c(-0.1,1.9,2.9,3.9), xlab="", ylab="")
grid(ln,cl)
xsem=sample(seq(0,cl,0.1), ns, replace=TRUE)
ysem=sample(seq(0,ln,0.1), ns, replace=TRUE)
ind.sem=floor(ysem)*cl + ceiling(xsem)
points(xsem,ysem, col="red", pch=16)
xy.sem[[1]]=cbind(x=xsem,y=ysem)
t.fr=table(arena)
tab.fr[1,as.numeric(names(t.fr))+1]<-t.fr[]
tab.fr[1,2]<-ns
pais[,,1]<-arena
for (tc in 2:tmax)
{
j.vf=pais[,,(tc-1)]==2
if(sum(j.vf)>0)
{
jovem=which(j.vf)
pais[,,tc][jovem]<-sample(c(0,2,3),length(jovem),replace=TRUE, prob=c((1-(p.jj+p.ja)),p.jj,p.ja))
}
a.vf=pais[,,(tc-1)]==3
if(sum(a.vf)>0)
{
adulto=which(a.vf)
pais[,,tc][adulto]<-sample(c(0,3),length(adulto),replace=TRUE, prob=c((1-p.aa),p.aa))
}
n.fec=round(fec*sum(a.vf))
vazio=which(pais[,,tc]==0)
#match(vazio,ind.sem)
sv=vazio%in% ind.sem
if(sum(sv)>0)
{
sem.vazio=vazio[sv]
pais[,,tc][sem.vazio]<-sample(c(0,2),sum(sv),replace=TRUE, prob=c((1-p.sj),p.sj))
}
if(sum(pais[,,tc])==0 & n.fec==0)
{
image(0:ln,0:cl, matrix(0,nrow=ln,ncol=cl), col="white", xlab="", ylab="", add=TRUE)
grid(ln,cl)
text(ln/2, cl/2, "EXTINCTION", col="red", cex=4)
break
}
#	if(sum[pais[,,tc]==0 & n.fec>0)
#	{
#	image(0:ln,0:cl, matrix(0,nrow=ln,ncol=cl), col="white", xlab="", ylab="", add=TRUE)
#	#text(ln/2, cl/2, "EXTINTION", col="red", cex=4)
#	grid(ln,cl)
#	stop()
#	}
image(0:ln,0:cl, matrix(0,nrow=ln,ncol=cl), col="white", xlab="", ylab="", add=TRUE)
image(0:ln, 0:cl, pais[,,tc], col=c("white", "green", "darkgreen") ,breaks=c(0,1,2,3), xlab="", ylab="",  add=TRUE, sub=paste("simulation no. =",tc ))
grid(ln,cl)
xsem=sample(seq(0,cl,0.1), n.fec, replace=TRUE)
ysem=sample(seq(0,ln,0.1), n.fec, replace=TRUE)
xy.sem[[2]]=cbind(x=xsem,y=ysem)
ind.sem=floor(ysem)*cl + ceiling(xsem)
points(xsem,ysem, col="red", pch=16)
Sys.sleep(.1)
t.fr=table(pais[,,tc])
tab.fr[tc,as.numeric(names(t.fr))+1]<-t.fr[]
tab.fr[tc,2]<-n.fec
}
tab.rel=tab.fr/apply(tab.fr,1,sum)
names(tab.rel)<-c("Empty", "Seed", "Juvenil", "Adult")
x11()
matplot(tab.rel, type="l",col=c("gray", "red", "green", "darkgreen"),lwd=2,main= "Stage Frequency", ylab="Frequency", xlab="Time (t)")
legend("topright",legend=c("Empty", "Seed", "Juvenil", "Adult") ,lty=1:4, col=c("gray", "red", "green", "darkgreen"), bty="n", cex=0.8 )
#t.sim=apply(pais,3, table)
invisible(list(simula=pais, xy=xy.sem))
}
popStr(p.sj=0.05, p.jj=0.99, p.ja=0, p.aa=1, fec=1.2, ns=100,nj=150,na=50, ln=20, cl=20, tmax=100)
popStr=function(p.sj, p.jj, p.ja, p.aa, fec, ns,nj,na, ln, cl, tmax)
{
x11()
ncel=ln*cl
arena=matrix(0,nrow=ln,ncol=cl)
xy.sem=list()
#sem[1]=ns
pais=array(0,dim=c(ln, cl, tmax))
tab.fr=matrix(NA,ncol=4, nrow=tmax)
#image(0:ln,0:cl, matrix(0,nrow=ln,ncol=cl), col="white", xlab="", ylab="")
#grid(ln,cl)
n0=rep(c(0,2,3), c((ncel-nj-na),nj, na))
arena[1:ncel]<-sample(n0)
image(0:ln, 0:cl, arena, main="Structured Population Dynamics", col=c("white", "green", "darkgreen") , breaks=c(-0.1,1.9,2.9,3.9), xlab="", ylab="")
grid(ln,cl)
xsem=sample(seq(0,cl,0.1), ns, replace=TRUE)
ysem=sample(seq(0,ln,0.1), ns, replace=TRUE)
ind.sem=floor(ysem)*cl + ceiling(xsem)
points(xsem,ysem, col="red", pch=16)
xy.sem[[1]]=cbind(x=xsem,y=ysem)
t.fr=table(arena)
tab.fr[1,as.numeric(names(t.fr))+1]<-t.fr[]
tab.fr[1,2]<-ns
pais[,,1]<-arena
for (tc in 2:tmax)
{
j.vf=pais[,,(tc-1)]==2
if(sum(j.vf)>0)
{
jovem=which(j.vf)
pais[,,tc][jovem]<-sample(c(0,2,3),length(jovem),replace=TRUE, prob=c((1-(p.jj+p.ja)),p.jj,p.ja))
}
a.vf=pais[,,(tc-1)]==3
if(sum(a.vf)>0)
{
adulto=which(a.vf)
pais[,,tc][adulto]<-sample(c(0,3),length(adulto),replace=TRUE, prob=c((1-p.aa),p.aa))
}
n.fec=round(fec*sum(a.vf))
vazio=which(pais[,,tc]==0)
#match(vazio,ind.sem)
sv=vazio%in% ind.sem
if(sum(sv)>0)
{
sem.vazio=vazio[sv]
pais[,,tc][sem.vazio]<-sample(c(0,2),sum(sv),replace=TRUE, prob=c((1-p.sj),p.sj))
}
if(sum(pais[,,tc])==0 & n.fec==0)
{
image(0:ln,0:cl, matrix(0,nrow=ln,ncol=cl), col="white", xlab="", ylab="", add=TRUE)
grid(ln,cl)
text(ln/2, cl/2, "EXTINCTION", col="red", cex=4)
break
}
#	if(sum[pais[,,tc]==0 & n.fec>0)
#	{
#	image(0:ln,0:cl, matrix(0,nrow=ln,ncol=cl), col="white", xlab="", ylab="", add=TRUE)
#	#text(ln/2, cl/2, "EXTINTION", col="red", cex=4)
#	grid(ln,cl)
#	stop()
#	}
image(0:ln,0:cl, matrix(0,nrow=ln,ncol=cl), col="white", xlab="", ylab="", add=TRUE)
image(0:ln, 0:cl, pais[,,tc], col=c("white", "green", "darkgreen") ,breaks=c(0,1,2,3), xlab="", ylab="",  add=TRUE, sub=paste("simulation no. =",tc ))
grid(ln,cl)
xsem=sample(seq(0,cl,0.1), n.fec, replace=TRUE)
ysem=sample(seq(0,ln,0.1), n.fec, replace=TRUE)
xy.sem[[2]]=cbind(x=xsem,y=ysem)
ind.sem=floor(ysem)*cl + ceiling(xsem)
points(xsem,ysem, col="red", pch=16)
Sys.sleep(.1)
t.fr=table(pais[,,tc])
tab.fr[tc,as.numeric(names(t.fr))+1]<-t.fr[]
tab.fr[tc,2]<-n.fec
}
tab.rel=tab.fr/apply(tab.fr,1,sum)
names(tab.rel)<-c("Empty", "Seed", "Juvenil", "Adult")
x11()
matplot(tab.rel, type="l",col=c("gray", "red", "green", "darkgreen"),lwd=2,main= "Stage Frequency", ylab="Frequency", xlab="Time (t)")
legend("topright",legend=c("Empty", "Seed", "Juvenil", "Adult") ,lty=1:4, col=c("gray", "red", "green", "darkgreen"), bty="n", cex=0.8 )
#t.sim=apply(pais,3, table)
invisible(list(simula=pais, xy=xy.sem))
}
popStr(p.sj=0.05, p.jj=0.99, p.ja=0, p.aa=1, fec=1.2, ns=100,nj=150,na=50, ln=20, cl=20, tmax=100)
metaCiEr <-function(tf,cl,ln,fi,i,e)
{
nmanchas=cl*ln
paisag=array(0,dim=c(ln,cl,tf))
paisag[,,1]=sample(c(rep(0,round(nmanchas-fi*nmanchas)),rep(1,round(fi*nmanchas))))
resultado=numeric()
rese=numeric()
resi=numeric()
for(tc in 2:tf)
{
pe=e*(1-(sum(paisag[,,tc-1])/nmanchas))
pc=i*sum(paisag[,,tc-1])/nmanchas
paisag[,,tc][paisag[,,(tc-1)]==1]<-sample(c(0,1),sum(paisag[,,tc-1]),replace=TRUE,prob=c(pe,1-pe))
paisag[,,tc][paisag[,,(tc-1)]==0]<-sample(c(0,1),nmanchas-sum(paisag[,,tc-1]),replace=TRUE,prob=c(1-pc,pc))
resultado[tc-1]=sum(paisag[,,tc])/nmanchas
rese[tc-1]=pe
resi[tc-1]=pc
}
x11()
animaMeta2(paisag)
x11()
grFim(paisag)
x11()
plot(1:tf,c(fi,resultado),type="l",xlab="Time",ylab="Occupancy proportion", ylim=c(0,1),main=paste("Propagulus Rain and Internal colonization and Rescue Effect","\n cols=",cl," rows=",ln," fi=",fi," i=",i, "e=",e),font.lab=2,lwd=2)
abline(h=0,lty=2)
points(1:tf,c(e*(1-fi),rese),type='l',lwd=2,col=4,lty=3)
points(1:tf,c(i*fi,resi),type='l',lwd=2,col=6,lty=3)
legend("topright", legend=c("patchs occupance", "colonization", "extintion"), lty=c(1,3,3), col=c(1,6,4), bty="n")
return(paisag)
}
metaCiEr(100,10,10,0.5,0.5,0.5)
animaMeta2=function(dados)
{
nsim=dim(dados)[3]
ln=dim(dados)[1]
cl=dim(dados)[2]
image(0:ln, 0:cl, dados[,,1], col=c("white", "green") , breaks=c(0,0.99,5),main="Metapopulation Dynamics", sub=paste("Initial configuration from", nsim," simulations",  sep=""), xlab="", ylab="")
grid(ln,cl)
Sys.sleep(.5)
conta12=dados[,,1]+ (2*dados[,,2])
image(0:ln, 0:cl, conta12, col=c("white","red","lightgreen", "darkgreen") , breaks=c(0,0.9,1.9,2.9,3.9),main="Metapopulation Dynamics", sub=paste("red= extintion; light green= colonization; dark green = permanence \n maximum time = ", nsim, sep=""), xlab="", ylab="")
for(i in 3:nsim)
{
conta12=dados[,,(i-1)]+ (2*dados[,,i])
image(0:ln, 0:cl, conta12, col=c("white","red","lightgreen", "darkgreen") , breaks=c(0,0.9,1.9,2.9,3.9), xlab="", ylab="", add=TRUE)
Sys.sleep(.1)
}
}
## grFim used in 'metaPop', 'metaEr', 'metaCi', 'metaCier'
grFim=function(dados)
{
op=par(mfrow=c(2,2))
nsim=dim(dados)[3]
ln=dim(dados)[1]
cl=dim(dados)[2]
image(0:ln, 0:cl, dados[,,1], col=c("white", "green") , breaks=c(0,0.99,5),main="Metapopulation Dynamics", sub=paste("time = 1/", nsim, sep=""), xlab="", ylab="")
grid(ln,cl)
for(ts in c(4,2,1))
{
sim=round(nsim/ts)
conta12=dados[,,(sim-1)]+ (2*dados[,,sim])
image(0:ln, 0:cl, conta12, col=c("white","red","lightgreen", "darkgreen") , breaks=c(0,0.9,1.9,2.9,3.9),main="Metapopulation Dynamics", sub=paste("red= extintion; light green= colonization;\n dark green = permanence \t time = ", sim, "/", nsim, sep=""), xlab="", ylab="")
#	Sys.sleep(.5)
}
par(op)
}
metaCiEr(100,10,10,0.5,0.5,0.5)
metaCiEr <-function(tf,cl,ln,fi,i,e)
{
nmanchas=cl*ln
paisag=array(0,dim=c(ln,cl,tf))
paisag[,,1]=sample(c(rep(0,round(nmanchas-fi*nmanchas)),rep(1,round(fi*nmanchas))))
resultado=numeric()
rese=numeric()
resi=numeric()
for(tc in 2:tf)
{
pe=e*(1-(sum(paisag[,,tc-1])/nmanchas))
pc=i*sum(paisag[,,tc-1])/nmanchas
paisag[,,tc][paisag[,,(tc-1)]==1]<-sample(c(0,1),sum(paisag[,,tc-1]),replace=TRUE,prob=c(pe,1-pe))
paisag[,,tc][paisag[,,(tc-1)]==0]<-sample(c(0,1),nmanchas-sum(paisag[,,tc-1]),replace=TRUE,prob=c(1-pc,pc))
resultado[tc-1]=sum(paisag[,,tc])/nmanchas
rese[tc-1]=pe
resi[tc-1]=pc
}
x11()
animaMeta2(paisag)
grFim(paisag)
x11()
plot(1:tf,c(fi,resultado),type="l",xlab="Time",ylab="Occupancy proportion", ylim=c(0,1),main=paste("Propagulus Rain and Internal colonization and Rescue Effect","\n cols=",cl," rows=",ln," fi=",fi," i=",i, "e=",e),font.lab=2,lwd=2)
abline(h=0,lty=2)
points(1:tf,c(e*(1-fi),rese),type='l',lwd=2,col=4,lty=3)
points(1:tf,c(i*fi,resi),type='l',lwd=2,col=6,lty=3)
legend("topright", legend=c("patchs occupance", "colonization", "extintion"), lty=c(1,3,3), col=c(1,6,4), bty="n")
invisible(paisag)
}
metaCiEr(100,10,10,0.5,0.5,0.5)
library("EcoVirtual", lib.loc="/home/melina/R/i686-pc-linux-gnu-library/2.15")
detach("package:EcoVirtual", unload=TRUE)
library("EcoVirtual", lib.loc="/home/melina/R/i686-pc-linux-gnu-library/2.15")
library("RcmdrPlugin.EcoVirtual", lib.loc="/home/melina/R/i686-pc-linux-gnu-library/2.15")
