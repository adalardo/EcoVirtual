}
x11()
op <- par(mfrow = c(2, 2)) # 2 x 2 pictures on one plot
plot(resulta[,1],resulta[,2],main="Exponential growth", sub=paste("lamb= ", lambda, "  var= ",
varl), type="l",lty=2,xlab="Time (t)", ylab="Population size (N)")
#tmax <- dim(resulta)[1]
plot(resulta[1:(tmax-1),2],resulta[2:tmax,2],type="l",col="red",xlab="N[t]",ylab="N[t+1]")
points(resulta[1:(tmax-1),2],resulta[2:tmax,2],pch=20)
plot(resulta[,1],resulta[,3],type="l", main="Logistic Growth", sub=paste(" rd= ",  rd), xlab="Time (t)", ylab="Population size (N)")
plot(resulta[1:(tmax-1),3],resulta[2:tmax,3],type="l",col="red",xlab="N[t]",ylab="N[t+1]")
points(resulta[1:(tmax-1),3],resulta[2:tmax,3],pch=20)
par(op)
invisible(resulta)
}
crescAtr(N0=610, lambda=1.1,varl=0.05,rd=2.99,K=600, tmax=100)
sobrevive=function(p.mort,N0)
{
res=rep(0,N0)
for(i in 1: N0)
{
conta=0
while(sample(c("m","v"),prob=c(p.mort,1-p.mort),size=1)=="v")
{
conta=conta+1
}
res[i]=conta
}
return(res)
}
sobrevive(0.5,200)
ci
metaEr <-function(tf,cl,ln,fi,pc,e)
{
nmanchas=cl*ln
paisag=array(0,dim=c(ln,cl,tf))
paisag[,,1]=matrix(sample(c(1,0),nmanchas,prob=c(fi,1-fi), replace=TRUE),ln,cl)
resultado=numeric()
res=numeric()
for(tc in 2:tf)
{
pe=e*(1-sum(paisag[,,tc-1])/nmanchas)
paisag[,,tc][paisag[,,(tc-1)]==1]<-sample(c(0,1),sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(pe,1-pe))
paisag[,,tc][paisag[,,(tc-1)]==0]<-sample(c(0,1),cl*ln-sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(1-pc,pc))
resultado[tc-1]=sum(paisag[,,tc])/nmanchas
res[tc-1]=pe
}
x11()
animaMeta2(paisag)
#x11()
grFim(paisag)
x11()
F=pc/e
if(F>1){F=1}
pe.eq=e-pc
if(pe.eq<0){pe.eq=0}
plot(1:tf,c(fi,resultado),type="l",xlab="Time",ylab="Proportion of occupancy", ylim=c(0,1),main=paste("Propagulus Rain and Rescue Effect","\n cols=",cl," rows=",ln," fi=",fi," pc=",pc," e=",e),font.lab=2,lwd=2)
abline(h=F,col=2,lwd=2,lty=2) # equilibrio F
points(1:tf,c(e*(1-fi),res),type='l',lwd=2,col="blue") # pe observado
abline(h=pe.eq,col="green",lwd=2,lty=2) # pe equilibrio
legend("topright", legend=c("proportion of occupancy", "equilibrium F", "extintion probability(pe)", "pe equilibrium"), lty=c(1,2,1,2), col=c("black","red","blue", "green"), bty="n")
return(paisag)
}
animaMeta2=function(dados)
{
nsim=dim(dados)[3]
ln=dim(dados)[1]
cl=dim(dados)[2]
image(0:ln, 0:cl, dados[,,1], col=c("white", "green") , breaks=c(0,0.99,5),main="Metapopulation Dynamics", sub=paste("Initial configuration from", nsim," simulations",  sep=""), xlab="", ylab="")
grid(ln,cl)
Sys.sleep(.5)
conta12=dados[,,1]+ (2*dados[,,2])
image(0:ln, 0:cl, conta12, col=c("white","red","lightgreen", "darkgreen") , breaks=c(0,0.9,1.9,2.9,3.9),main="Metapopulation Dynamics", sub=paste("red= extintion; light green= colonization; dark green = permanence \n maximum time = ", nsim, sep=""), xlab="", ylab="")
for(i in 3:nsim)
{
conta12=dados[,,(i-1)]+ (2*dados[,,i])
image(0:ln, 0:cl, conta12, col=c("white","red","lightgreen", "darkgreen") , breaks=c(0,0.9,1.9,2.9,3.9), xlab="", ylab="", add=TRUE)
Sys.sleep(.1)
}
}
grFim=function(dados)
{
op=par(mfrow=c(2,2))
nsim=dim(dados)[3]
ln=dim(dados)[1]
cl=dim(dados)[2]
image(0:ln, 0:cl, dados[,,1], col=c("white", "green") , breaks=c(0,0.99,5),main="Metapopulation Dynamics", sub=paste("time = 1/", nsim, sep=""), xlab="", ylab="")
grid(ln,cl)
for(ts in c(4,2,1))
{
sim=round(nsim/ts)
conta12=dados[,,(sim-1)]+ (2*dados[,,sim])
image(0:ln, 0:cl, conta12, col=c("white","red","lightgreen", "darkgreen") , breaks=c(0,0.9,1.9,2.9,3.9),main="Metapopulation Dynamics", sub=paste("red= extintion; light green= colonization;\n dark green = permanence \t time = ", sim, "/", nsim, sep=""), xlab="", ylab="")
#	Sys.sleep(.5)
}
par(op)
}
metaEr(100,20,20,0.25,0.1,0.1)
metaEr <-function(tf,cl,ln,fi,pc,e)
{
nmanchas=cl*ln
paisag=array(0,dim=c(ln,cl,tf))
paisag[,,1]=matrix(sample(c(1,0),nmanchas,prob=c(fi,1-fi), replace=TRUE),ln,cl)
resultado=numeric()
res=numeric()
for(tc in 2:tf)
{
pe=e*(1-sum(paisag[,,tc-1])/nmanchas)
paisag[,,tc][paisag[,,(tc-1)]==1]<-sample(c(0,1),sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(pe,1-pe))
paisag[,,tc][paisag[,,(tc-1)]==0]<-sample(c(0,1),cl*ln-sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(1-pc,pc))
resultado[tc-1]=sum(paisag[,,tc])/nmanchas
res[tc-1]=pe
}
x11()
animaMeta2(paisag)
#x11()
grFim(paisag)
x11()
F=pc/e
if(F>1){F=1}
pe.eq=e-pc
if(pe.eq<0){pe.eq=0}
plot(1:tf,c(fi,resultado),type="l",xlab="Time",ylab="Proportion/Probability", ylim=c(0,1),main=paste("Propagulus Rain and Rescue Effect","\n cols=",cl," rows=",ln," fi=",fi," pc=",pc," e=",e),font.lab=2,lwd=2)
abline(h=F,col=2,lwd=2,lty=2) # equilibrio F
points(1:tf,c(e*(1-fi),res),type='l',lwd=2,col="blue") # pe observado
abline(h=pe.eq,col="green",lwd=2,lty=2) # pe equilibrio
legend("topright", legend=c("Proportion of occupancy (P)", "Equilibrium P", "Extintion probability (pe)", "pe equilibrium"), lty=c(1,2,1,2), col=c("black","red","blue", "green"), bty="n")
return(paisag)
}
metaEr(100,20,20,0.25,0.1,0.1)
metaEr <-function(tf,cl,ln,fi,pc,e)
{
nmanchas=cl*ln
paisag=array(0,dim=c(ln,cl,tf))
paisag[,,1]=matrix(sample(c(1,0),nmanchas,prob=c(fi,1-fi), replace=TRUE),ln,cl)
resultado=numeric()
res=numeric()
for(tc in 2:tf)
{
pe=e*(1-sum(paisag[,,tc-1])/nmanchas)
paisag[,,tc][paisag[,,(tc-1)]==1]<-sample(c(0,1),sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(pe,1-pe))
paisag[,,tc][paisag[,,(tc-1)]==0]<-sample(c(0,1),cl*ln-sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(1-pc,pc))
resultado[tc-1]=sum(paisag[,,tc])/nmanchas
res[tc-1]=pe
}
x11()
animaMeta2(paisag)
#x11()
grFim(paisag)
x11()
F=pc/e
if(F>1){F=1}
pe.eq=e-pc
if(pe.eq<0){pe.eq=0}
plot(1:tf,c(fi,resultado),type="l",xlab="Time",ylab="Proportion/Probability", ylim=c(0,1),main=paste("Propagulus Rain and Rescue Effect","\n cols=",cl," rows=",ln," fi=",fi," pc=",pc," e=",e),font.lab=2,lwd=2)
abline(h=F,col=2,lwd=2,lty=2) # equilibrio F
points(1:tf,c(e*(1-fi),res),type='l',lwd=2,col="blue") # pe observado
abline(h=pe.eq,col="green",lwd=2,lty=2) # pe equilibrio
legend("topright", legend=c("Proportion of occupancy (P)", "Equilibrium P", "Extintion probability (pe)", "pe equilibrium"), lty=c(1,2,1,2), col=c("black","red","blue", "green"), bty="n")
invisible(paisag)
}
metaEr(100,20,20,0.25,0.1,0.1)
metaCi <-function(tf,cl,ln,fi,i,pe)
{
paisag=array(0,dim=c(ln,cl,tf))
nmanchas=cl*ln
paisag[,,1]=matrix(sample(c(rep(1,fi*nmanchas), rep(0,round((1-fi)*nmanchas)))), ncol=cl)
resultado=numeric()
for(tc in 2:tf)
{
pc=i*sum(paisag[,,tc-1])/(cl*ln)
paisag[,,tc][paisag[,,(tc-1)]==1]<-sample(c(0,1),sum(paisag[,,(tc-1)]), replace=TRUE,prob=c(pe,1-pe))
paisag[,,tc][paisag[,,(tc-1)]==0]<-sample(c(0,1),cl*ln-sum(paisag[,,(tc-1)]), replace=TRUE,prob=c(1-pc,pc))
resultado[tc-1]=sum(paisag[,,tc])/nmanchas
}
x11()
animaMeta2(paisag)
#x11()
grFim(paisag)
x11()
F=1-(pe/i)
plot(1:tf,c(fi,resultado),type="l",xlab="Time",ylab="Proportion of ocupation",
ylim=c(0,1),main=paste("Propagulus Rain and Internal Colonization","\n cols=",cl," rows=",ln," fi=",fi," pi=",i," pe=",pe),font.lab=2,lwd=2)
abline(h=F,col=2,lwd=2,lty=2)
ymin=resultado[length(resultado)/2:length(resultado)]
legend(x=length(resultado)/2,y=ymin, legend=("expected equilibrium"), lty=2, col="red", bty="n")
return(paisag)
}
metaCi(tf=100,cl=10,ln=10,fi=.1,i=1,pe=0.5)
metaEr <-function(tf,cl,ln,fi,pc,e)
{
nmanchas=cl*ln
paisag=array(0,dim=c(ln,cl,tf))
paisag[,,1]=matrix(sample(c(1,0),nmanchas,prob=c(fi,1-fi), replace=TRUE),ln,cl)
resultado=numeric()
res=numeric()
for(tc in 2:tf)
{
pe=e*(1-sum(paisag[,,tc-1])/nmanchas)
paisag[,,tc][paisag[,,(tc-1)]==1]<-sample(c(0,1),sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(pe,1-pe))
paisag[,,tc][paisag[,,(tc-1)]==0]<-sample(c(0,1),cl*ln-sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(1-pc,pc))
resultado[tc-1]=sum(paisag[,,tc])/nmanchas
res[tc-1]=pe
}
x11()
animaMeta2(paisag)
#x11()
grFim(paisag)
x11()
F=pc/e
if(F>1){F=1}
pe.eq=e-pc
if(pe.eq<0){pe.eq=0}
plot(1:tf,c(fi,resultado),type="l",xlab="Time",ylab="Proportion/Probability", ylim=c(0,1),main=paste("Propagulus Rain and Rescue Effect","\n cols=",cl," rows=",ln," fi=",fi," pc=",pc," e=",e),font.lab=2,lwd=2)
abline(h=F,col=2,lwd=2,lty=2) # equilibrio F
points(1:tf,c(e*(1-fi),res),type='l',lwd=2,col="blue") # pe observado
abline(h=pe.eq,col="green",lwd=2,lty=2) # pe equilibrio
ymin=resultado[length(resultado)/2:length(resultado)]
legend(x=length(resultado)/2,y=ymin, legend=c("Proportion of occupancy (P)", "Equilibrium P", "Extintion probability (pe)", "pe equilibrium"), lty=c(1,2,1,2), col=c("black","red","blue", "green"), bty="n")
invisible(paisag)
}
metaEr(100,20,20,0.25,0.1,0.1)
ymin=min(resultado[length(resultado)/2:length(resultado)])
metaEr <-function(tf,cl,ln,fi,pc,e)
{
nmanchas=cl*ln
paisag=array(0,dim=c(ln,cl,tf))
paisag[,,1]=matrix(sample(c(1,0),nmanchas,prob=c(fi,1-fi), replace=TRUE),ln,cl)
resultado=numeric()
res=numeric()
for(tc in 2:tf)
{
pe=e*(1-sum(paisag[,,tc-1])/nmanchas)
paisag[,,tc][paisag[,,(tc-1)]==1]<-sample(c(0,1),sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(pe,1-pe))
paisag[,,tc][paisag[,,(tc-1)]==0]<-sample(c(0,1),cl*ln-sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(1-pc,pc))
resultado[tc-1]=sum(paisag[,,tc])/nmanchas
res[tc-1]=pe
}
x11()
animaMeta2(paisag)
#x11()
grFim(paisag)
x11()
F=pc/e
if(F>1){F=1}
pe.eq=e-pc
if(pe.eq<0){pe.eq=0}
plot(1:tf,c(fi,resultado),type="l",xlab="Time",ylab="Proportion/Probability", ylim=c(0,1),main=paste("Propagulus Rain and Rescue Effect","\n cols=",cl," rows=",ln," fi=",fi," pc=",pc," e=",e),font.lab=2,lwd=2)
abline(h=F,col=2,lwd=2,lty=2) # equilibrio F
points(1:tf,c(e*(1-fi),res),type='l',lwd=2,col="blue") # pe observado
abline(h=pe.eq,col="green",lwd=2,lty=2) # pe equilibrio
ymin=min(resultado[length(resultado)/2:length(resultado)])
legend(x=length(resultado)/2,y=ymin, legend=c("Proportion of occupancy (P)", "Equilibrium P", "Extintion probability (pe)", "pe equilibrium"), lty=c(1,2,1,2), col=c("black","red","blue", "green"), bty="n")
invisible(paisag)
}
metaEr(100,20,20,0.25,0.1,0.1)
metaEr <-function(tf,cl,ln,fi,pc,e)
{
nmanchas=cl*ln
paisag=array(0,dim=c(ln,cl,tf))
paisag[,,1]=matrix(sample(c(1,0),nmanchas,prob=c(fi,1-fi), replace=TRUE),ln,cl)
resultado=numeric()
res=numeric()
for(tc in 2:tf)
{
pe=e*(1-sum(paisag[,,tc-1])/nmanchas)
paisag[,,tc][paisag[,,(tc-1)]==1]<-sample(c(0,1),sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(pe,1-pe))
paisag[,,tc][paisag[,,(tc-1)]==0]<-sample(c(0,1),cl*ln-sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(1-pc,pc))
resultado[tc-1]=sum(paisag[,,tc])/nmanchas
res[tc-1]=pe
}
x11()
animaMeta2(paisag)
#x11()
grFim(paisag)
x11()
F=pc/e
if(F>1){F=1}
pe.eq=e-pc
if(pe.eq<0){pe.eq=0}
plot(1:tf,c(fi,resultado),type="l",xlab="Time",ylab="Proportion/Probability", ylim=c(0,1),main=paste("Propagulus Rain and Rescue Effect","\n cols=",cl," rows=",ln," fi=",fi," pc=",pc," e=",e),font.lab=2,lwd=2)
abline(h=F,col=2,lwd=2,lty=2) # equilibrio F
points(1:tf,c(e*(1-fi),res),type='l',lwd=2,col="blue") # pe observado
abline(h=pe.eq,col="green",lwd=2,lty=2) # pe equilibrio
ymin=min(resultado[(length(resultado)/2):(length(resultado)])
legend(x=length(resultado)/2,y=ymin, legend=c("Proportion of occupancy (P)", "Equilibrium P", "Extintion probability (pe)", "pe equilibrium"), lty=c(1,2,1,2), col=c("black","red","blue", "green"), bty="n")
invisible(paisag)
}
metaEr <-function(tf,cl,ln,fi,pc,e)
{
nmanchas=cl*ln
paisag=array(0,dim=c(ln,cl,tf))
paisag[,,1]=matrix(sample(c(1,0),nmanchas,prob=c(fi,1-fi), replace=TRUE),ln,cl)
resultado=numeric()
res=numeric()
for(tc in 2:tf)
{
pe=e*(1-sum(paisag[,,tc-1])/nmanchas)
paisag[,,tc][paisag[,,(tc-1)]==1]<-sample(c(0,1),sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(pe,1-pe))
paisag[,,tc][paisag[,,(tc-1)]==0]<-sample(c(0,1),cl*ln-sum(paisag[,,(tc-1)]), replace=TRUE, prob=c(1-pc,pc))
resultado[tc-1]=sum(paisag[,,tc])/nmanchas
res[tc-1]=pe
}
x11()
animaMeta2(paisag)
#x11()
grFim(paisag)
x11()
F=pc/e
if(F>1){F=1}
pe.eq=e-pc
if(pe.eq<0){pe.eq=0}
plot(1:tf,c(fi,resultado),type="l",xlab="Time",ylab="Proportion/Probability", ylim=c(0,1),main=paste("Propagulus Rain and Rescue Effect","\n cols=",cl," rows=",ln," fi=",fi," pc=",pc," e=",e),font.lab=2,lwd=2)
abline(h=F,col=2,lwd=2,lty=2) # equilibrio F
points(1:tf,c(e*(1-fi),res),type='l',lwd=2,col="blue") # pe observado
abline(h=pe.eq,col="green",lwd=2,lty=2) # pe equilibrio
ymin=min(resultado[(length(resultado)/2):(length(resultado))])
legend(x=length(resultado)/2,y=ymin, legend=c("Proportion of occupancy (P)", "Equilibrium P", "Extintion probability (pe)", "pe equilibrium"), lty=c(1,2,1,2), col=c("black","red","blue", "green"), bty="n")
invisible(paisag)
}
metaEr(100,20,20,0.25,0.1,0.1)
compLV=function(n01,n02,tmax,r1,r2,k1,k2,alfa,beta)
{
resulta=matrix(0, ncol=3, nrow=tmax)
resulta[,1]=0:(tmax-1)
resulta[1,c(2,3)]=c(n01,n02)
for(t in 2:tmax)
{
nsp1=resulta[(t-1),2]
nsp2=resulta[(t-1),3]
resulta[t,2]=nsp1 + r1*nsp1*((k1-nsp1-alfa*nsp2)/k1)
resulta[t,3]=nsp2 + r2*nsp2*((k2-nsp2-beta*nsp1)/k2)
if (resulta[t,2]<1)
{
resulta[t,2]=0
}
if (resulta[t,3]<1)
{
resulta[t,3]=0
}
}
x11()
old=par(mfrow=c(1,2))
plot(resulta[,1],resulta[,2],ylim=c(0,max(na.omit(resulta[,2:3]))),type="l",lty=4,xlab="time (t)",ylab="Population size", main="Population Growth", col="blue", lwd=1.5 )
legend("topleft", legend=c("Sp. 1", "Sp. 2"), lty=4, col=c("blue", "green"), bty="n", cex=0.8)
lines(resulta[,1],resulta[,3], col="green", lty=4, lwd=1.5)
plot(resulta[,2],resulta[,3],type="l",col="red",xlab="N1",ylab="N2",ylim=c(0,max(c(na.omit(resulta[,3]),k1/alfa,k2))),xlim=c(0,max(c(na.omit(resulta[,2]),k2/beta,k1))), main="Isoclines")
segments(0,k1/alfa,k1,0,lty=4, lwd=1.5, col="blue")
segments(0,k2,k2/beta,0,lty=4,lwd=1.5, col="green" )
legend("topleft", title="Equilibrium without habitat destruction",legend=c("Sp.1 ", "Sp. 2"), lty=4, col=c("blue", "green"), bty="n", cex=0.8)
return(resulta)
}
compLV(n01=10, n02=10,r1=0.05, r2=0.03, k1=80, k2=50, alfa=1.2, beta=0.5, tmax=200)
compLV=function(n01,n02,tmax,r1,r2,k1,k2,alfa,beta)
{
resulta=matrix(0, ncol=3, nrow=tmax)
resulta[,1]=0:(tmax-1)
resulta[1,c(2,3)]=c(n01,n02)
for(t in 2:tmax)
{
nsp1=resulta[(t-1),2]
nsp2=resulta[(t-1),3]
resulta[t,2]=nsp1 + r1*nsp1*((k1-nsp1-alfa*nsp2)/k1)
resulta[t,3]=nsp2 + r2*nsp2*((k2-nsp2-beta*nsp1)/k2)
if (resulta[t,2]<1)
{
resulta[t,2]=0
}
if (resulta[t,3]<1)
{
resulta[t,3]=0
}
}
x11()
old=par(mfrow=c(1,2))
plot(resulta[,1],resulta[,2],ylim=c(0,max(na.omit(resulta[,2:3]))),type="l",lty=4,xlab="time (t)",ylab="Population size", main="Population Growth", col="blue", lwd=1.5 )
legend("topleft", legend=c("Sp. 1", "Sp. 2"), lty=4, col=c("blue", "green"), bty="n", cex=0.8)
lines(resulta[,1],resulta[,3], col="green", lty=4, lwd=1.5)
plot(resulta[,2],resulta[,3],type="l",col="red",xlab="N1",ylab="N2",ylim=c(0,max(c(na.omit(resulta[,3]),k1/alfa,k2))),xlim=c(0,max(c(na.omit(resulta[,2]),k2/beta,k1))), main="Isoclines")
segments(0,k1/alfa,k1,0,lty=4, lwd=1.5, col="blue")
segments(0,k2,k2/beta,0,lty=4,lwd=1.5, col="green" )
legend("topleft", title="Equilibrium without habitat destruction",legend=c("Sp.1 ", "Sp. 2", "Populations trajectory"), lty=4, col=c("blue", "green", "red"), bty="n", cex=0.8)
invisible(resulta)
}
compLV(n01=10, n02=10,r1=0.05, r2=0.03, k1=80, k2=50, alfa=1.2, beta=0.5, tmax=200)
compLV=function(n01,n02,tmax,r1,r2,k1,k2,alfa,beta)
{
resulta=matrix(0, ncol=3, nrow=tmax)
resulta[,1]=0:(tmax-1)
resulta[1,c(2,3)]=c(n01,n02)
for(t in 2:tmax)
{
nsp1=resulta[(t-1),2]
nsp2=resulta[(t-1),3]
resulta[t,2]=nsp1 + r1*nsp1*((k1-nsp1-alfa*nsp2)/k1)
resulta[t,3]=nsp2 + r2*nsp2*((k2-nsp2-beta*nsp1)/k2)
if (resulta[t,2]<1)
{
resulta[t,2]=0
}
if (resulta[t,3]<1)
{
resulta[t,3]=0
}
}
x11()
old=par(mfrow=c(1,2))
plot(resulta[,1],resulta[,2],ylim=c(0,max(na.omit(resulta[,2:3]))),type="l",lty=4,xlab="time (t)",ylab="Population size", main="Population Growth", col="blue", lwd=1.5 )
legend("topleft", legend=c("Sp. 1", "Sp. 2"), lty=4, col=c("blue", "green"), bty="n", cex=0.8)
lines(resulta[,1],resulta[,3], col="green", lty=4, lwd=1.5)
plot(resulta[,2],resulta[,3],type="l",col="red",xlab="N1",ylab="N2",ylim=c(0,max(c(na.omit(resulta[,3]),k1/alfa,k2))),xlim=c(0,max(c(na.omit(resulta[,2]),k2/beta,k1))), main="Isoclines")
segments(0,k1/alfa,k1,0,lty=4, lwd=1.5, col="blue")
segments(0,k2,k2/beta,0,lty=4,lwd=1.5, col="green" )
legend("topleft", title="Equilibrium without habitat destruction",legend=c("Sp.1 ", "Sp. 2", "Populations trajectory"), lty=c(4,4,1), col=c("blue", "green", "red"), bty="n", cex=0.8)
invisible(resulta)
}
compLV(n01=10, n02=10,r1=0.05, r2=0.03, k1=80, k2=50, alfa=1.2, beta=0.5, tmax=200)
compLV=function(n01,n02,tmax,r1,r2,k1,k2,alfa,beta)
{
resulta=matrix(0, ncol=3, nrow=tmax)
resulta[,1]=0:(tmax-1)
resulta[1,c(2,3)]=c(n01,n02)
for(t in 2:tmax)
{
nsp1=resulta[(t-1),2]
nsp2=resulta[(t-1),3]
resulta[t,2]=nsp1 + r1*nsp1*((k1-nsp1-alfa*nsp2)/k1)
resulta[t,3]=nsp2 + r2*nsp2*((k2-nsp2-beta*nsp1)/k2)
if (resulta[t,2]<1)
{
resulta[t,2]=0
}
if (resulta[t,3]<1)
{
resulta[t,3]=0
}
}
x11()
old=par(mfrow=c(1,2))
plot(resulta[,1],resulta[,2],ylim=c(0,max(na.omit(resulta[,2:3]))),type="l",lty=4,xlab="time (t)",ylab="Population size", main="Population Growth", col="blue", lwd=1.5 )
legend("topleft", legend=c("Sp. 1", "Sp. 2"), lty=4, col=c("blue", "green"), bty="n", cex=0.8)
lines(resulta[,1],resulta[,3], col="green", lty=4, lwd=1.5)
plot(resulta[,2],resulta[,3],type="l",col="red",xlab="N1",ylab="N2",ylim=c(0,max(c(na.omit(resulta[,3]),k1/alfa,k2))),xlim=c(0,max(c(na.omit(resulta[,2]),k2/beta,k1))), main="Isoclines")
segments(0,k1/alfa,k1,0,lty=4, lwd=1.5, col="blue")
segments(0,k2,k2/beta,0,lty=4,lwd=1.5, col="green" )
legend("topleft", title="Equilibrium without habitat destruction",legend=c("isocline sp.1 ", "Isocline sp. 2", "Populations trajectory"), lty=c(4,4,1), col=c("blue", "green", "red"), bty="n", cex=0.8)
invisible(resulta)
}
compLV(n01=10, n02=10,r1=0.05, r2=0.03, k1=80, k2=50, alfa=1.2, beta=0.5, tmax=200)
compLV=function(n01,n02,tmax,r1,r2,k1,k2,alfa,beta)
{
resulta=matrix(0, ncol=3, nrow=tmax)
resulta[,1]=0:(tmax-1)
resulta[1,c(2,3)]=c(n01,n02)
for(t in 2:tmax)
{
nsp1=resulta[(t-1),2]
nsp2=resulta[(t-1),3]
resulta[t,2]=nsp1 + r1*nsp1*((k1-nsp1-alfa*nsp2)/k1)
resulta[t,3]=nsp2 + r2*nsp2*((k2-nsp2-beta*nsp1)/k2)
if (resulta[t,2]<1)
{
resulta[t,2]=0
}
if (resulta[t,3]<1)
{
resulta[t,3]=0
}
}
x11()
old=par(mfrow=c(1,2), mar=c(4,3,2,1))
plot(resulta[,1],resulta[,2],ylim=c(0,max(na.omit(resulta[,2:3]))),type="l",lty=4,xlab="time (t)",ylab="Population size", main="Population Growth", col="blue", lwd=1.5 )
legend("topleft", legend=c("Sp. 1", "Sp. 2"), lty=4, col=c("blue", "green"), bty="n", cex=0.8)
lines(resulta[,1],resulta[,3], col="green", lty=4, lwd=1.5)
plot(resulta[,2],resulta[,3],type="l",col="red",xlab="N1",ylab="N2",ylim=c(0,max(c(na.omit(resulta[,3]),k1/alfa,k2))),xlim=c(0,max(c(na.omit(resulta[,2]),k2/beta,k1))), main="Isoclines")
segments(0,k1/alfa,k1,0,lty=4, lwd=1.5, col="blue")
segments(0,k2,k2/beta,0,lty=4,lwd=1.5, col="green" )
legend("topleft", title="Equilibrium without habitat destruction",legend=c("isocline sp.1 ", "Isocline sp. 2", "Populations trajectory"), lty=c(4,4,1), col=c("blue", "green", "red"), bty="n", cex=0.8)
invisible(resulta)
}
compLV(n01=10, n02=10,r1=0.05, r2=0.03, k1=80, k2=50, alfa=1.2, beta=0.5, tmax=200)
compLV=function(n01,n02,tmax,r1,r2,k1,k2,alfa,beta)
{
resulta=matrix(0, ncol=3, nrow=tmax)
resulta[,1]=0:(tmax-1)
resulta[1,c(2,3)]=c(n01,n02)
for(t in 2:tmax)
{
nsp1=resulta[(t-1),2]
nsp2=resulta[(t-1),3]
resulta[t,2]=nsp1 + r1*nsp1*((k1-nsp1-alfa*nsp2)/k1)
resulta[t,3]=nsp2 + r2*nsp2*((k2-nsp2-beta*nsp1)/k2)
if (resulta[t,2]<1)
{
resulta[t,2]=0
}
if (resulta[t,3]<1)
{
resulta[t,3]=0
}
}
x11()
old=par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(resulta[,1],resulta[,2],ylim=c(0,max(na.omit(resulta[,2:3]))),type="l",lty=4,xlab="time (t)",ylab="Population size", main="Population Growth", col="blue", lwd=1.5 )
legend("topleft", legend=c("Sp. 1", "Sp. 2"), lty=4, col=c("blue", "green"), bty="n", cex=0.8)
lines(resulta[,1],resulta[,3], col="green", lty=4, lwd=1.5)
plot(resulta[,2],resulta[,3],type="l",col="red",xlab="N1",ylab="N2",ylim=c(0,max(c(na.omit(resulta[,3]),k1/alfa,k2))),xlim=c(0,max(c(na.omit(resulta[,2]),k2/beta,k1))), main="Isoclines")
segments(0,k1/alfa,k1,0,lty=4, lwd=1.5, col="blue")
segments(0,k2,k2/beta,0,lty=4,lwd=1.5, col="green" )
legend("topleft", title="Equilibrium without habitat destruction",legend=c("isocline sp.1 ", "Isocline sp. 2", "Populations trajectory"), lty=c(4,4,1), col=c("blue", "green", "red"), bty="n", cex=0.8)
invisible(resulta)
}
compLV(n01=10, n02=10,r1=0.05, r2=0.03, k1=80, k2=50, alfa=1.2, beta=0.5, tmax=200)
